{
	// Place your JsonApi workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Mock Template Function without Promise": {
		"scope": "javascript,typescript",
		"prefix": "KMockFuncWithOutPromise",
		"body": [
			"if (CommonMock.AllowMock) {",
			"    if (CommonMock.MockKey === '$1') {",
			"        let LocalMockData = require('./$TM_FILENAME_BASE.json');",
			"",
			"        let LocalData = StartFunc({",
			"            inDataPK: CommonMock.DataPK,",
			"            ...LocalMockData",
			"        });",
			"        console.log('LocalData : ', LocalData);",
			"        $0",
			"   };",
			"};"
		],
		"description": "Log output to console"
	},
	"Mock Html Focus": {
		"scope": "javascript,typescript",
		"prefix": "KMockHtmlFocus",
		"body": [
			"let jFLocalHtmlFocus$1 = () => {",
			"   let jVarLocalHtmlId = '$1';",
			"   let jVarLocal$1 = document.getElementById(jVarLocalHtmlId);",
			"   jVarLocal$1.focus();",
			"};"
		],
		"description": "Log output to console"
	},
	"Mock 5-FetchFunc": {
		"scope": "javascript,typescript",
		"prefix": "KMockFetchFunc",
		"body": [
			"import ApiConfigJson from './../../../../../../ApiConfig.json' assert {type: 'json'};",

			"let StartFunc = async ({ inBodyData }) => {",
			"   let jVarLocalBodyData = inBodyData;",
			
				"   let jVarLocalFetchUrl = `/${ApiConfigJson.ProjectName}/Api/Data/FromFolder/FromFile/Items/FromDataFolder/Insert`;",
			
				"   let jVarLocalFetchHeaderObject = {",
					"method: 'post',",
					"headers: {",
						"'Accept': 'application/json',",
						"'Content-Type': 'application/json'",
					"},",
					"body: JSON.stringify(jVarLocalBodyData)",
				"};",
			
				"let response = await fetch(jVarLocalFetchUrl, jVarLocalFetchHeaderObject);",
				"let jVarLocalResponse = await response.json();",
			
				"return await jVarLocalResponse;",
			"};"
			
		],
		"description": "Log output to console"
	},
	"Mock Middleware ifcondition": {
		"scope": "javascript,typescript",
		"prefix": "KMockMiddlewareIfCondition",
		"body": [

			"if (('$1' in req.body) === false) {",
				"res.json({ KTF: false, KReason: '$1 not found in body' })",
				"return;",
			"};"
		],
		"description": "Log output to console"
	},
	"Mock Get Html Id": {
		"scope": "javascript,typescript",
		"prefix": "KMockGetHtmlId",
		"body": [
			"let jVarLocalHtmlId = '$1';",
			"let jVarLocal$1 = document.getElementById(jVarLocalHtmlId);"
		],
		"description": "Log output to console"
	},
	"Mock Log": {
		"scope": "javascript,typescript",
		"prefix": "KMockImportJson",
		"body": [
			"console.log('$1 : ', $1);"
		],
		"description": "Log output to console"
	},
	"Mock Import Json": {
		"scope": "javascript,typescript",
		"prefix": "KMockImportJson",
		"body": [
			"import ApiConfigJson from '$1' assert {type: 'json'};"
		],
		"description": "Log output to console"
	},
	"Mock Class AddListener": {
		"scope": "javascript,typescript",
		"prefix": "KMockClassAddListener",
		"body": [
			"import { StartFunc as StartFuncClickFunc } from './ClickFunc.js';",
			"",
			"let StartFunc = () => {",
			"    let jVarLocalClassName = document.getElementsByClassName('SettlementButtonClass');",
			"",
			"    for (let i = 0; i < jVarLocalClassName.length; i++) {",
			"        jVarLocalClassName[i].addEventListener('click', StartFuncClickFunc);",
			"    };",
			"};",
			"",
			"export { StartFunc };"
		],
		"description": "Log output to console"
	},
	"Mock Class AddListener ClickFunc": {
		"scope": "javascript,typescript",
		"prefix": "KMockClassAddListenerClickFunc",
		"body": [
			"let StartFunc = () => {",
			"    let jVarLocalEvent = event;",
			"    let jVarLocalCurrentTarget = jVarLocalEvent.currentTarget;",
			"    let jVarLocalDataSet = jVarLocalCurrentTarget.dataset;",
			"",
			"    if ('$1' in jVarLocalDataSet) {",
			"        let jVarLocal$1 = jVarLocalDataSet.$1;",
			"    };",
			"};",
			"",
			"export { StartFunc };"
		],
		"description": "Log output to console"
	},
	"Mock Template Function": {
		"scope": "javascript,typescript",
		"prefix": "KMock",
		"body": [
			"if (CommonMock.AllowMock) {",
			"if (CommonMock.MockKey === '$1') {",
			"let LocalMockData = require('./$TM_FILENAME_BASE.json');",
			"};",
			"};"
		],
		"description": "Log output to console"
	},
	"Mock document.getElementById": {
		"scope": "javascript,typescript",
		"prefix": "KMockDocumentGetElementById",
		"body": [
			" let jVarLocal$1 = document.getElementById('$1');"
		],
		"description": "Log output to console"
	},
	"Empty Start Function": {
		"scope": "javascript,typescript",
		"prefix": "KStartFunc",
		"body": [
			"const StartFunc = ($1) => {",
			"   	$0",
			"	};",
			"",
			"export { StartFunc };"
		],
		"description": "Log output to console"
	},
	"Mock Template Function": {
		"scope": "javascript,typescript",
		"prefix": "KMock",
		"body": [
			"if (CommonMock.AllowMock) {",
			"if (CommonMock.MockKey === '$1') {",
			"let LocalMockData = require('./$TM_FILENAME_BASE.json');",
			"};",
			"};"
		],
		"description": "Log output to console"
	},
	"KMockPromise": {
		"scope": "javascript,typescript",
		"prefix": "KMockPromise",
		"body": [
			"if (CommonMock.AllowMock) {",
			"	if (CommonMock.MockKey === '$1') {",
			"		let LocalMockData = require('./$TM_FILENAME_BASE.json');",
			"",
			"		StartFunc({",
			"			inDataPK: CommonMock.DataPK,",
			"			...LocalMockData",
			"		}).then(PromiseData => {",
			"			console.log('PromiseData : ', PromiseData);",
			"           $0",
			"		});",
			"	};",
			"};"
		],
		"description": "Log output to console"
	},
	"Mock Template Function For Html": {
		"scope": "javascript,typescript",
		"prefix": "KMockHtmlAssignToDom",
		"body": [
			"let jFLocalToInnerHtml$1 = ({ in$1 }) => {",
			"	let jVarLocalHtmlId = '$1';",
			"   let jVarLocal$1 = document.getElementById(jVarLocalHtmlId);",
			"   jVarLocal$1.innerHTML = in$1;",
			"};"
		],
		"description": "Log output to console"
	},
	"To Dom Input Value": {
		"scope": "javascript,typescript",
		"prefix": "KMockHtmlAssignToDomInputValue",
		"body": [
			"let jFLocalToInput$1 = ({ in$1 }) => {",
			"	let jVarLocalHtmlId = '$1';",
			"   let jVarLocal$1 = document.getElementById(jVarLocalHtmlId);",
			"   ",
			"   if (jVarLocal$1 === null === false) {",
			"      jVarLocal$1.value = in$1;",
			"   };",
			"};"
		],
		"description": "Log output to console"
	},
	"Mock Template Function For Html to pull from Dom": {
		"scope": "javascript,typescript",
		"prefix": "KMockHtmlAssignFromDom",
		"body": [
			"let jFLocalFromDom$1 = () => {",
			"	let jVarLocalHtml$1 = '$1';",
			"   let jVarHtml$1 = document.getElementById(jVarLocalHtml$1);",
			"   let jVarHtml$1Value = jVarHtml$1.value.trim();",
			"   return jVarHtml$1Value;",
			"};"
		],
		"description": "Log output to console"
	},
	"Mock Function to pull from Dom innerHTML": {
		"scope": "javascript,typescript",
		"prefix": "KMockHtmlAssignFromDom",
		"body": [
			"let jFLocalFromDom$1 = () => {",
			"	let jVarLocalHtml$1 = '$1';",
			"   let jVarHtml$1 = document.getElementById(jVarLocalHtml$1);",
			"   let jVarHtml$1Value = jVarHtml$1.innerHTML.trim();",
			"   return jVarHtml$1Value;",
			"};"
		],
		"description": "Log output to console"
	},
	"Mock Template Function For Return Html Control": {
		"scope": "javascript,typescript",
		"prefix": "KMockHtmlReturnHTMLControl",
		"body": [
			"let jFLocalReturnHTMLControlFor$1 = () => {",
			"	let jVarLocalHtml$1 = '$1';",
			"   let jVarHtml$1 = document.getElementById(jVarLocalHtml$1);",
			"   return jVarHtml$1;",
			"};"
		],
		"description": "Log output to console"
	}
}